#!/bin/bash
#
# A command-line metronome using lilypond snippets to support arbitrary musical patterns.
#
# See `usage()` for further details.
#
# Copyright (C) 2025  David Hobach  GPLv3

set -o pipefail

set -m #ignore Ctrl-C for spawned child processes

#error [msg]
function error {
echo "ERROR: $1" >&2
exit 1
}

#debug [msg]
function debug {
[ $DEBUG -eq 0 ] && echo "DEBUG: $1" >&2
}

#global vars
SCRIPT_DIR="$(readlink -f "${BASH_SOURCE[0]}")" || error "Failed to compute SCRIPT_DIR."
SCRIPT_DIR="$(dirname "$SCRIPT_DIR")" || error "Failed to compute SCRIPT_DIR."
SCRIPT_NAME="${BASH_SOURCE[0]##*/}"
LAST="$SCRIPT_DIR/$SCRIPT_NAME.last"
LY_DIR="$SCRIPT_DIR/ly"
MIDI2DEV="$SCRIPT_DIR/util/midi2dev.py"
COMMON_DIR="$LY_DIR/common"
[ -f "/etc/$SCRIPT_NAME.conf" ] && CONF="/etc/$SCRIPT_NAME.conf" || CONF="$SCRIPT_DIR/$SCRIPT_NAME.conf"
REPEATS=1
declare -A SETLIST
SETLIST_LENGTH=0 #number of items in the setlist
SETLIST_PROCESS= #pid of the last spawned background process

#set exit trap
EXIT_TRAP=':'
trap 'eval $EXIT_TRAP' EXIT

function usage {
echo "$SCRIPT_NAME [options] [tempo] [file]
$SCRIPT_NAME setlist [file]

A command-line metronome using lilypond snippets to support arbitrary musical patterns.

[tempo]: Tempo in bpm to use. Either specify a number or an instruction such as '4 = 120'.
         Also, you may specify a varying tempo with
         [tempo] = [start]:[increase]:[duration]:[end]

         [start]:    Start tempo in bpm.
         [increase]: Bpm increase per [duration] repetitions (default: 2).
         [duration]: How often to repeat the pattern before increasing the bpm (default: 2).
         [end]:      Final tempo in bpm (default: [start]+150). If positive, the pattern
                     starts with [start] bpm again. If prefixed with a minus sign, the tempo
                     will slowly decrease by [increase] bpms until it reaches [start].

[file]:  regular mode:
           Full path to the lilypond file to use as metronome. Check the ly folder for the
           currently available patterns. Can be left out or specified as fuzzy path, if fzf
           is installed.
         setlist mode:
           Full path to a setlist text file to play through. See the examples directory for
           the expected syntax. Use the navigation keys (arrow keys by default) to switch
           to the next or previous song.

[options]:
  -i    Force interactive mode (default, if a terminal appears to be connected).
  -n    Force non-interactive mode (default, if no terminal appears to be connected).

Further configuration options are available at $CONF."
exit 1
}

function deps {
local dep=
local unmet=""

for dep in "$@" ; do
  [ -z "$dep" ] && continue
  command -v "$dep" &> /dev/null || unmet="$dep"$'\n'"$unmet"
done

[ -z "$unmet" ] || error "The script requires the following commands, but they were not found:"$'\n'"$unmet"
}

#generate the midi.ly file content
#NOTE: this could also be done in guile scheme, but that syntax is rather terrible; it's probably also more slow
function genMidiLy {
local tempo="$1"
local tempoBase="$2"
local tempoIncrease="$3"
local tempoDuration="$4"
local tempoEnd="$5"
local tempoDecrease=1

#special case: negative end tempo --> we need to go back to the base tempo in the end
if [ $tempoEnd -le 0 ] ; then
  tempoDecrease=0
  tempoEnd=$(( - $tempoEnd ))
fi

if [ $tempoIncrease -le 0 ] ; then
  #static tempo
  echo -E "myMidiMusic = \\repeat unfold $REPEATS { \\myMusic }"
else
  #dynamic tempo
  local tempoIts=$(( ($tempoEnd - $tempo) / $tempoIncrease ))
  [ $tempoIts -lt 1 ] && tempoIts=1
  local reps=$(( $REPEATS / $tempoDuration / $tempoIts ))
  [ $tempoDecrease -eq 0 ] && reps=$(( $reps / 2 ))
  [ $reps -lt 1 ] && reps=1
  echo -E "myMidiMusic = \\repeat unfold $reps { "
  local i=
  for (( i=$tempo ; i <= $tempoEnd ; i=i+$tempoIncrease )) ; do
    echo -E "\\repeat unfold $tempoDuration { \\tempo $tempoBase = $i \\myMusic }"
  done
  if [ $tempoDecrease -eq 0 ] ; then
    for (( i=$tempoEnd-$tempoIncrease ; i > $tempo ; i=i-$tempoIncrease )) ; do
      echo -E "\\repeat unfold $tempoDuration { \\tempo $tempoBase = $i \\myMusic }"
    done
  fi
  echo -E "}"
fi
}

#whether or not $MIDI_SERVER is already running
function is_server_running {
local server="${MIDI_SERVER%% *}"
pgrep -f "$server" > /dev/null
}

#run "$@"
#Run in regular mode.
function run {
#set defaults
local interactive=0
[ -t 0 ] || interactive=1

#parse options
while : ; do
  case "$1" in
    "-h")
      usage
      ;;
    "help")
      usage
      ;;
    "-n")
      interactive=1
      ;;
    "-i")
      interactive=0
      ;;
    "--")
      shift
      break
      ;;
    *)
      [[ "$1" == "-"* ]] && error "Invalid option: $1" || break
      ;;
  esac

  shift
done

#parse args
local tempo="$1"
local tempoBase="$TEMPO_BASE"
local token=
local i=0
local re='^[0-9]*$'
local reNeg='^-?[0-9]*$'
local reTempoBase='^([0-9\.]+)[ ]*=[ ]*([0-9]+)$'
IFS=: read -r -a tokens <<< "$tempo"
for token in "${tokens[@]}" ; do
  if [ $i -eq 0 ] ; then
    if [[ "$token" =~ $re ]] ; then
      tempo="$token"
    elif [[ "$token" =~ $reTempoBase ]] ; then
      #handle tempo base notation
      tempoBase="${BASH_REMATCH[1]}"
      tempo="${BASH_REMATCH[2]}"
    else
      error "Tempo in invalid format: $tempo"
    fi
  elif [ $i -eq 3 ] ; then
    [[ ! "$token" =~ $reNeg ]] && error "Token in invalid format: $token"
  else
    [[ ! "$token" =~ $re ]] && error "Token in invalid format: $token"
  fi
  i=$(( $i+1 ))
done
local tempoIncrease="${tokens[1]:-0}"
[[ "$1" == *":"* ]] && [ $tempoIncrease -eq 0 ] && tempoIncrease=2 #set default only if a dynamic tempo was chosen
local tempoDuration="${tokens[2]:-2}"
local tempoEnd="${tokens[3]:-$(( $tempo + 150))}"

debug "tempo: $tempo"
debug "tempo increase: $tempoIncrease"
debug "tempo duration: $tempoDuration"
debug "tempo end: $tempoEnd"

#arg checks
[ $tempo -gt 0 ] || error "The tempo must be > 0."
[ $tempoIncrease -ge 0 ] || error "The increase must be >= 0."
[ $tempoDuration -gt 0 ] || error "The duration must be > 0."
local tempoE="$tempoEnd"
[ $tempoE -lt 0 ] && tempoE=$(( - $tempoE ))
[ $tempo -lt $tempoE ] || error "The start tempo must be lower than the end tempo."

#only remember, if in interactive mode
[ $interactive -eq 0 ] || REMEMBER=1

#obtain file path
local lyFile="$2"
if [ ! -f "$lyFile" ] ; then
  if [ $REMEMBER -eq 0 ] && [ -z "$lyFile" ] ; then
    local last="$(cat "$LAST" 2> /dev/null)"
    [ -f "$last" ] && lyFile="$last"
  fi
  if command -v "fzf" &> /dev/null ; then
    lyFile="${lyFile##$LY_DIR/}"
    lyFile="${lyFile%.ly}"
    if [ $interactive -eq 0 ] ; then
      lyFile="$(find "$LY_DIR" -name '*.ly' -not -path "*/common/*" | sort | fzf $FZF_OPTS -q "$lyFile")" || error "Failed to execute fzf. Exit code: $?"
    else
      lyFile="$(find "$LY_DIR" -name '*.ly' -not -path "*/common/*" | sort | fzf $FZF_OPTS -f "$lyFile")" || error "Failed to execute fzf. Exit code: $?"
      IFS= read -r lyFile <<< "$lyFile" #use first match
    fi
    echo "$lyFile"
  fi
fi
[ -f "$lyFile" ] || error "File does not exist: $lyFile"
[ $REMEMBER -eq 0 ] && readlink -e "$lyFile" > "$LAST"

#tempo base heuristics
if [ -z "$tempoBase" ] ; then
  if [[ "$lyFile" == *"/6-8/"* ]] ; then
    tempoBase="4."
  else
    tempoBase="4"
  fi
fi
debug "tempo base: $tempoBase"

#create working dir
local wDir wDirEsc
wDir="$(mktemp -d)" || error "Failed to run mktemp."
printf -v wDirEsc '%q' "$wDir"
if [ $DEBUG -eq 0 ] ; then
  debug "working dir: $wDir"
else
  EXIT_TRAP="$EXIT_TRAP ; rm -rf $wDirEsc"
fi

#copy necessary files
cp "$lyFile" "$wDir" || error "Failed to copy $lyFile."
cp -r "$COMMON_DIR" "$wDir" || error "Failed to copy $COMMON_DIR."

#do necessary modifications
local vars="$wDir/common/vars.ly"
local midi="$wDir/common/midi.ly"
{
  echo -E "
    myTempo = $tempo
    myTempoBase = ##{ $tempoBase #}
    myTempoIncrease = $tempoIncrease
    myTempoDuration = $tempoDuration
    myTempoEnd = $tempoEnd
    myInstrument = \"$MIDI_INSTRUMENT\"
    myAccP = $ACCENT_PRIMARY
    myAccS = $ACCENT_SECONDARY
    myReg = $REGULAR_NOTE
    myRepeats = $REPEATS
    $RAW_VARS
  "
} >> "$vars"
genMidiLy "$tempo" "$tempoBase" "$tempoIncrease" "$tempoDuration" "$tempoEnd" > "$midi" || error "Failed to generate the midi.ly file."

#generate MIDI output
lyFile="$wDir/${lyFile##*/}"
echo "Compiling..."
local addOpts=""
[ -z "$PDF_VIEWER" ] && addOpts="-dno-print-pages"
( #subshell as we cd
  cd "$wDir"
  lilypond $addOpts "$lyFile" &> "$wDir/lilypond.log"
) || error "Failed to run lilypond on $lyFile. Errors:"$'\n'"$(cat "$wDir/lilypond.log")"

#show pdf
local pdfFile="${lyFile%.ly}.pdf"
if [ -n "$PDF_VIEWER" ] ; then
  $PDF_VIEWER "$pdfFile" &> /dev/null < /dev/null &
  disown
fi

#start MIDI server, if necessary
if [ -n "$MIDI_SERVER" ] && ! is_server_running ; then
  echo "Starting MIDI server: $MIDI_SERVER"
  $MIDI_SERVER &> /dev/null < /dev/null &
  disown

  if [ $KEEP_SERVER -ne 0 ] ; then
    EXIT_TRAP="$EXIT_TRAP ; kill $! &> /dev/null"
  fi

  #wait for the server to come up
  sleep $MIDI_SERVER_WAIT
fi

#play MIDI output
local midiFile="${lyFile%.ly}.midi"
echo "Playing..."
#NOTE: we cannot use exec as that would remove existing EXIT traps
"$MIDI2DEV" --loop -c "$SCRIPT_NAME" -f "$midiFile" -a "$MIDI_API" -o "$MIDI_SERVER_PORT" > /dev/null &
EXIT_TRAP="$EXIT_TRAP ; kill $! &> /dev/null"
wait $!
}

function addToSetlist {
local title="$1"
local tempo"$2"
local file="$3"

[ -z "$title" ] && [ -z "$tempo" ] && [ -z "$file" ] && return 1
[ -z "$tempo" ] && error "Missing tempo for title: $title, file: $file."
[ -z "$file" ] && error "Missing file for title: $title, tempo: $tempo."

SETLIST["${SETLIST_LENGTH}_title"]="$title"
SETLIST["${SETLIST_LENGTH}_tempo"]="$tempo"
SETLIST["${SETLIST_LENGTH}_file"]="$file"

SETLIST_LENGTH=$(( $SETLIST_LENGTH + 1 ))
}

function readSetlist {
local setlist="$1"
local line=
local commentRegex='^#.*$'
local valueRegex='^(title|tempo|file):[[:space:]]*(.*[^[:space:]]+)[[:space:]]*$'
local decimalRegex="^[0-9]+$"
local title=""
local tempo=""
local file=""

while IFS= read -r line || [ -n "$line" ] ; do
  if [[ "$line" =~ $commentRegex ]] ; then
    continue
  elif [ -z "$line" ] ; then
    addToSetlist "$title" "$tempo" "$file" || continue

    #reset
    title=""
    tempo=""
    file=""
  elif [[ "$line" =~ $valueRegex ]] ; then
    local name="${BASH_REMATCH[1]}"
    local value="${BASH_REMATCH[2]}"
    if [[ "$name" == "title" ]] ; then
      title="$value"
    elif [[ "$name" == "tempo" ]] ; then
      tempo="$value"
      [[ $tempo =~ $decimalRegex ]] || error "Non-decimal tempo: $tempo"
    elif [[ "$name" == "file" ]] ; then
      file="$value"
    else
      error "Invalid name: $name - Programming error?!"
    fi
  else
    error "Invalid line in $setlist: $line"
  fi
done < "$setlist"

#add last, if necessary (EOF was reached)
addToSetlist "$title" "$tempo" "$file"

[ ${#SETLIST[@]} -gt 0 ] || error "The setlist appears to be empty or could not be read."

[ $DEBUG -eq 0 ] && declare -p SETLIST
return 0
}

#playSetlist [index]
function playSetlist {
local index="$1"
[ $index -ge $SETLIST_LENGTH ] && error "Incorrect index @playSetlist. Programming error?!"
[ $index -lt 0 ] && error "Incorrect index @playSetlist. Programming error?!"

local title="${SETLIST["${index}_title"]}"
local tempo="${SETLIST["${index}_tempo"]}"
local file="${SETLIST["${index}_file"]}"

#terminate the last playback
[ -n "$SETLIST_PROCESS" ] && kill "$SETLIST_PROCESS"

#text to speech synth and the run are executed in a subshell in order not to block user input
(
  if [ -n "$title" ] ; then
    echo ""
    echo "$title"
    #NOTE: we deliberately do not check whether the program is installed - if it's not, it will print an error to the user
    [ -n "$TEXT_TO_SPEECH" ] && $TEXT_TO_SPEECH <<< "$title"
  fi

  #exit traps are not inherited to subshells, so we need to initialize it again
  EXIT_TRAP=':'
  trap 'eval $EXIT_TRAP' EXIT

  run -n "$tempo" "$file" < /dev/null
) &
disown
SETLIST_PROCESS=$!
}

function main {
[ $# -lt 1 ] && usage

deps "mktemp" "lilypond" "find" "sort" "cat" "readlink" "pgrep"

#load config
[ -f "$CONF" ] || error "The configuration file at $CONF does not exist."
source "$CONF"
deps "${MIDI_SERVER%% *}"

if [[ "$1" == "setlist" ]] ; then
  #setlist mode
  [ $# -eq 2 ] || usage
  [ ${#SETLIST_KEY_NEXT} -eq ${#SETLIST_KEY_PREVIOUS} ] || error "The SETLIST_KEYS_NEXT and SETLIST_KEY_PREVIOUS configuration options must have identical length."
  readSetlist "$2"

  #make sure processes spawned via playSetlist are killed
  EXIT_TRAP="$EXIT_TRAP ; eval 'kill \$SETLIST_PROCESS &> /dev/null'"

  local cur=0 #index of the currently played title
  playSetlist "$cur"

  local char=
  while read -rs -N${#SETLIST_KEY_NEXT} char ; do
    [ $DEBUG -eq 0 ] && debug "$(declare -p char)"
    if [[ "$char" == "$SETLIST_KEY_NEXT" ]] ; then
      [ $(( $cur +1 )) -lt $SETLIST_LENGTH ] || continue
      cur=$(( $cur +1 ))
      playSetlist "$cur"
    elif [[ "$char" == "$SETLIST_KEY_PREVIOUS" ]] ; then
      [ $cur -eq 0 ] && continue
      cur=$(( $cur -1 ))
      playSetlist "$cur"
    else
      continue
    fi
    [ $DEBUG -eq 0 ] && debug "cur: $cur"
  done
else
  #regular mode
  run "$@"
fi
}

main "$@"
